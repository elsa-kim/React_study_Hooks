// Hooks
/*
useState : 함수형 컴포넌트에서도 가변적인 상태 지닐 수 있게 해줌(상태관리)
  - const [value, setValue] = useState(0)
  - useState 함수의 파라미터에는 상태의 기본값 넣어줌 
  - 함수 호출되면 배열 반환 : 첫번째 원소는 상태값, 두번째 원소는 상태 설정하는 함수

useEffect : 리액트 컴포넌트가 렌더링 될 때마다 특정 작업 수행하도록 설정할 수 있는 Hook
  - useEffect에서 설정한 함수를 컴포넌트가 화면에 맨 처음 렌더링 될 때만 실행하고, 업데이트 될 때는 실행하지 않으려면 함수의 두번째 파라미터로 빈 배열 넣기
  - 특정 값이 변경될 때만 호출하고 싶은 경우 두번째 파라미터로 전달되는 배열 안 검사하고 싶은 값 넣기
    useState 통해 관리하고 있는 상태 넣어도 되고, props로 전달받은 값 넣어도 됨
  - 컴포넌트 언마운트 되기 전이나 업데이트되기 직전 어떤 작업 수행하고 싶다면 useEffect에서 뒷정리(cleanup) 함수 반환해줘야함
  - 언마운트 될 때만 cleanup함수 호출하고 싶다면 useEffect 함수 두번째 파라미터에 비어있는 배열

useReducer : useState보다 더 다양한 컴포넌트 상황에 따라 다양한 상태를 다른 값으로 업데이트 해주고 싶을때 사용
  - 현재상태, 업데이트를 위해 필요한 정보를 담은 action 값을 전달받아 새로운 상태 반환하는 함수로 새로운 상태 만들 때 반드시 불편성 지켜줘야 함
  - function reducer(state, action) {
     return {...} // 불변성 지키며 업데이트한 새로운 상태 반환
    }
  - 액션 값 형태 : {type:'INCREMENT', // 다른 값 필요하면 추가로 들어감}
  - useReducer에서 사용하는 액션 객체는 반드시 type 지닐 필요 없음, 객체 아닌 문자열이나 숫자여도 상관없음
  - useReducer의 첫 번째 파라미터에는 리듀서 함수를 넣고 두번째 파라미터에는 해당 리듀서의 기본값 넣어줌
  - state값과 dispatch 함수 받아옴 : state는 현재 가리키고 있는 상태, dispatch는 액션 발생시키는 함수
  - dispatch(action)과 같은 형태로 함수 안 파라미터로 액션 값 넣어주면 리듀서 함수 호출됨
  - useReducer 장점 : 컴포넌트 업데이트 로직을 컴포넌트 바깥으로 빼낼 수 있다

useMemo : 함수형 컴포넌트 내부에서 발생하는 연산 최적화, 렌더링하는 과정에서 특정값 바뀌었을 때만 연산 실행하고 원하는 값 바뀌지 않았다면 이전 연산 결과 다시 사용

useCallback : 
  




*/
